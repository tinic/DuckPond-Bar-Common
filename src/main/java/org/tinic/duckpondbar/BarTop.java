package org.tinic.duckpondbar;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Arrays;

import heronarts.lx.LX;
import heronarts.lx.LXPattern;
import heronarts.lx.model.LXModel;
import heronarts.lx.model.LXPoint;
import heronarts.lx.color.LXColor;

  class BarTopFront extends LXModel {
  
    public BarTopFront() {
      super(createPoints());
    }

    public static List<LXPoint> createPoints() {
      List<LXPoint> leds = new ArrayList<LXPoint>();

      double bar_height = 1.0;

    // bar top, all values in m
      double[] bar_leds_front = {
        -3.047,  1.828,-3.047,  1.812,-3.047,  1.795,-3.047,  1.778,-3.047,  1.761,-3.047,  1.745,-3.047,  1.728,-3.047,
        -3.047,  1.561,-3.047,  1.544,-3.047,  1.528,-3.047,  1.511,-3.047,  1.494,-3.047,  1.477,-3.047,  1.461,-3.047,
        -3.047,  1.294,-3.047,  1.277,-3.047,   1.26,-3.047,  1.244,-3.047,  1.227,-3.047,   1.21,-3.047,  1.193,-3.047,
        -3.047,  1.026,-3.047,   1.01,-3.047,  0.993,-3.047,  0.976,-3.047,   0.96,-3.047,  0.943,-3.047,  0.926,-3.047,
        -3.047,  0.759,-3.047,  0.742,-3.047,  0.726,-3.047,  0.709,-3.047,  0.692,-3.047,  0.676,-3.047,  0.659,-3.047,
        -3.036,  0.492,-3.033,  0.476,-3.029,   0.46,-3.025,  0.444, -3.02,  0.428,-3.015,  0.412,-3.009,  0.396,-3.003,
         -2.93,  0.249, -2.92,  0.236, -2.91,  0.223,-2.899,   0.21,-2.888,  0.198,-2.876,  0.186,-2.865,  0.174,-2.853,
        -2.731,  0.074,-2.716,  0.067,-2.701,  0.059,-2.686,  0.052,-2.671,  0.046,-2.655,  0.039,-2.639,  0.034,-2.624,
        -2.476,  0.001,-2.459,      0,-2.443,      0,-2.426,      0,-2.409,      0,-2.393,      0,-2.376,      0,-2.359,
        -2.209,      0,-2.192,      0,-2.175,      0,-2.159,      0,-2.142,      0,-2.125,      0,-2.109,      0,-2.092,
        -1.942,      0,-1.925,      0,-1.908,      0,-1.891,      0,-1.875,      0,-1.858,      0,-1.841,      0,-1.825,
        -1.674,      0,-1.658,      0,-1.641,      0,-1.624,      0,-1.607,      0,-1.591,      0,-1.574,      0,-1.557,
        -1.407,      0, -1.39,      0,-1.374,      0,-1.357,      0, -1.34,      0,-1.323,      0,-1.307,      0, -1.29,
         -1.14,      0,-1.123,      0,-1.106,      0, -1.09,      0,-1.073,      0,-1.056,      0,-1.039,      0,-1.023,
        -0.872,      0,-0.856,      0,-0.839,      0,-0.822,      0,-0.806,      0,-0.789,      0,-0.772,      0,-0.755,
        -0.605,      0,-0.588,      0,-0.572,      0,-0.555,      0,-0.538,      0,-0.521,      0,-0.505,      0,-0.488,
        -0.338,      0,-0.321,      0,-0.304,      0,-0.288,      0,-0.271,      0,-0.254,      0,-0.237,      0,-0.221,
         -0.07,      0,-0.054,      0,-0.037,      0, -0.02,      0,-0.004,      0, 0.012,      0, 0.029,      0, 0.046,
         0.196,      0, 0.213,      0, 0.229,      0, 0.246,      0, 0.263,      0, 0.279,      0, 0.296,      0, 0.313,
         0.463,      0,  0.48,      0, 0.497,      0, 0.513,      0,  0.53,      0, 0.547,      0, 0.563,      0,  0.58,
         0.731,      0, 0.747,      0, 0.764,      0, 0.781,      0, 0.797,      0, 0.814,      0, 0.831,      0, 0.847,
         0.998,      0, 1.015,      0, 1.031,      0, 1.048,      0, 1.065,      0, 1.081,      0, 1.098,      0, 1.115,
         1.265,      0, 1.282,      0, 1.299,      0, 1.315,      0, 1.332,      0, 1.349,      0, 1.365,      0, 1.382,
         1.532,      0, 1.549,      0, 1.566,      0, 1.583,      0, 1.599,      0, 1.616,      0, 1.633,      0, 1.649,
           1.8,      0, 1.816,      0, 1.833,      0,  1.85,      0, 1.867,      0, 1.883,      0,   1.9,      0, 1.917,
         2.067,      0, 2.084,      0,   2.1,      0, 2.117,      0, 2.134,      0, 2.151,      0, 2.167,      0, 2.184,
         2.334,      0, 2.351,      0, 2.368,      0, 2.384,      0, 2.401,      0, 2.418,      0, 2.435,      0, 2.451,
           2.6,  0.021, 2.616,  0.026, 2.632,  0.031, 2.647,  0.037, 2.663,  0.043, 2.678,  0.049, 2.694,  0.056, 2.709,
         2.834,  0.146, 2.847,  0.157, 2.859,  0.168, 2.871,   0.18, 2.882,  0.192, 2.894,  0.204, 2.904,  0.217, 2.915,
         2.993,  0.358,     3,  0.373, 3.006,  0.388, 3.012,  0.404, 3.017,   0.42, 3.022,  0.436, 3.027,  0.452, 3.031,
         3.048,  0.617, 3.048,  0.634, 3.048,  0.651, 3.048,  0.667, 3.048,  0.684, 3.048,  0.701, 3.048,  0.717, 3.048,
         3.048,  0.885, 3.048,  0.901, 3.048,  0.918, 3.048,  0.935, 3.048,  0.951, 3.048,  0.968, 3.048,  0.985, 3.048,
         3.048,  1.152, 3.048,  1.169, 3.048,  1.185, 3.048,  1.202, 3.048,  1.219,
      };

      for (int p = bar_leds_front.length-2; p >= 0; p-=2) {
        LXPoint pf = new LXPoint(bar_leds_front[p+0], bar_leds_front[p+1], bar_height);
        leds.add(pf);
      }
      
      return leds;
    }
  
  }

  class BarTopBack extends LXModel {
  
    public BarTopBack() {
      super(createPoints());
    }
    
    public static List<LXPoint> createPoints() {
      List<LXPoint> leds = new ArrayList<LXPoint>();

      double bar_height = 1.0;

      double[] bar_leds_back = {
        -3.038,  1.828,-3.021,  1.828,-3.004,  1.828,-2.988,  1.828,-2.971,  1.828,-2.954,  1.828,-2.938,  1.828,-2.921,
        -2.770,  1.828,-2.754,  1.828,-2.737,  1.828, -2.72,  1.828,-2.704,  1.828,-2.687,  1.828, -2.67,  1.828,-2.654,
        -2.503,  1.828,-2.487,  1.828, -2.47,  1.828,-2.453,  1.828,-2.436,  1.828,-2.433,  1.815,-2.433,  1.799,-2.433,
        -2.433,  1.632,-2.433,  1.615,-2.433,  1.598,-2.433,  1.582,-2.433,  1.565,-2.433,  1.548,-2.433,  1.531,-2.433,
        -2.433,  1.364,-2.433,  1.348,-2.433,  1.331,-2.433,  1.314,-2.433,  1.298,-2.433,  1.281,-2.433,  1.264,-2.433,
        -2.433,  1.097,-2.433,  1.081,-2.433,  1.064,-2.433,  1.047,-2.433,   1.03,-2.433,  1.014,-2.433,  0.997,-2.433,
        -2.433,   0.83,-2.433,  0.813,-2.433,  0.797,-2.433,   0.78,-2.433,  0.763,-2.433,  0.746,-2.433,   0.73,-2.433,
        -2.386,  0.609, -2.37,  0.609,-2.353,  0.609,-2.336,  0.609,-2.319,  0.609,-2.303,  0.609,-2.286,  0.609,-2.269,
        -2.119,  0.609,-2.102,  0.609,-2.086,  0.609,-2.069,  0.609,-2.052,  0.609,-2.035,  0.609,-2.019,  0.609,-2.002,
        -1.852,  0.609,-1.835,  0.609,-1.818,  0.609,-1.802,  0.609,-1.785,  0.609,-1.768,  0.609,-1.752,  0.609,-1.735,
        -1.584,  0.609,-1.568,  0.609,-1.551,  0.609,-1.534,  0.609,-1.518,  0.609,-1.501,  0.609,-1.484,  0.609,-1.468,
        -1.317,  0.609,-1.301,  0.609,-1.284,  0.609,-1.267,  0.609, -1.25,  0.609,-1.234,  0.609,-1.217,  0.609,  -1.2,
         -1.05,  0.609,-1.033,  0.609,-1.017,  0.609,    -1,  0.609,-0.983,  0.609,-0.966,  0.609, -0.95,  0.609,-0.933,
        -0.783,  0.609,-0.766,  0.609,-0.749,  0.609,-0.733,  0.609,-0.716,  0.609,-0.699,  0.609,-0.683,  0.609,-0.666,
        -0.516,  0.609,-0.499,  0.609,-0.482,  0.609,-0.465,  0.609,-0.449,  0.609,-0.432,  0.609,-0.415,  0.609,-0.399,
        -0.248,  0.609,-0.232,  0.609,-0.215,  0.609,-0.198,  0.609,-0.181,  0.609,-0.165,  0.609,-0.148,  0.609,-0.131,
         0.018,  0.609, 0.035,  0.609, 0.051,  0.609, 0.068,  0.609, 0.085,  0.609, 0.101,  0.609, 0.118,  0.609, 0.135,
         0.285,  0.609, 0.302,  0.609, 0.319,  0.609, 0.335,  0.609, 0.352,  0.609, 0.369,  0.609, 0.385,  0.609, 0.402,
         0.552,  0.609, 0.569,  0.609, 0.586,  0.609, 0.603,  0.609, 0.619,  0.609, 0.636,  0.609, 0.653,  0.609, 0.669,
          0.82,  0.609, 0.836,  0.609, 0.853,  0.609,  0.87,  0.609, 0.887,  0.609, 0.903,  0.609,  0.92,  0.609, 0.937,
         1.087,  0.609, 1.104,  0.609,  1.12,  0.609, 1.137,  0.609, 1.154,  0.609,  1.17,  0.609, 1.187,  0.609, 1.204,
         1.354,  0.609, 1.371,  0.609, 1.388,  0.609, 1.404,  0.609, 1.421,  0.609, 1.438,  0.609, 1.454,  0.609, 1.471,
         1.621,  0.609, 1.638,  0.609, 1.655,  0.609, 1.672,  0.609, 1.688,  0.609, 1.705,  0.609, 1.722,  0.609, 1.738,
         1.889,  0.609, 1.905,  0.609, 1.922,  0.609, 1.939,  0.609, 1.955,  0.609, 1.972,  0.609, 1.989,  0.609, 2.006,
         2.156,  0.609, 2.173,  0.609, 2.189,  0.609, 2.206,  0.609, 2.223,  0.609, 2.239,  0.609, 2.256,  0.609, 2.273,
         2.423,  0.609,  2.44,  0.609, 2.443,  0.622, 2.443,  0.639, 2.443,  0.656, 2.443,  0.673, 2.443,  0.689, 2.443,
         2.443,  0.856, 2.443,  0.873, 2.443,   0.89, 2.443,  0.906, 2.443,  0.923, 2.443,   0.94, 2.443,  0.956, 2.443,
         2.443,  1.123, 2.443,   1.14, 2.443,  1.157, 2.443,  1.174, 2.443,   1.19, 2.443,  1.207, 2.448,  1.219, 2.465,
         2.615,  1.219, 2.632,  1.219, 2.649,  1.219, 2.665,  1.219, 2.682,  1.219, 2.699,  1.219, 2.715,  1.219, 2.732,
         2.883,  1.219, 2.899,  1.219, 2.916,  1.219, 2.933,  1.219, 2.949,  1.219, 2.966,  1.219, 2.983,  1.219, 2.999,
       };

      for (int p = bar_leds_back.length-2; p >=0 ; p-=2) {
        LXPoint pb = new LXPoint(bar_leds_back[p+0], bar_leds_back[p+1], bar_height);
        leds.add(pb);
      }
      return leds;
    }
  }

public class BarTop extends BarModel {

  private Gradient springGradient;
  private Gradient summerGradient;
  private Gradient autumGradient;
  private Gradient winterGradient;

  public LXFloat4 calc(BarPattern.Effect effect, int LEDindex, double time, LXFloat4 glob_pos) {
      switch (effect) {
          case Spring: {
            double x = (toLocal(glob_pos).x + 1.0) * 0.5 + time * 0.05;
            return springGradient.reflect(x).clamp();
          }
          case Summer: {
            double x = (toLocal(glob_pos).x + 1.0) * 0.5 + time * 0.05;
            return summerGradient.reflect(x).clamp();
          }
          case Autum: {
            double x = (toLocal(glob_pos).x + 1.0) * 0.5 + time * 0.05;
            return autumGradient.reflect(x).clamp();
          }
          case Winter: {
            double x = (toLocal(glob_pos).x + 1.0) * 0.5 + time * 0.05;
            return winterGradient.reflect(x).clamp();
          }
          case TestStrip: {
              int led = (int)(time * 10.0);
              led %= getPoints().size();
             return new LXFloat4(1.0, 1.0, 1.0).mul(led == LEDindex ?  1.0 : 0.0);
          }
      }
      return glob_pos;
  }

  public void initGradients() {

      //
      // Go https://cssgradient.io/ to create gradients the easiest way
      //

      LXFloat4[] springGradient = {
         new LXFloat4(0x289877,0.00),
         new LXFloat4(0xd4e8c2,0.49),
         new LXFloat4(0xe2dda1,0.75),
         new LXFloat4(0xdea120,1.00)
      };

      this.springGradient = new Gradient(springGradient, Gradient.ColorMode.RGB);

      LXFloat4[] summerGradient = {
         new LXFloat4(0x0e7396,0.00),
         new LXFloat4(0x7dbc3c,0.22),
         new LXFloat4(0x91cb2b,0.34),
         new LXFloat4(0xff9d61,0.64),
         new LXFloat4(0xff7940,0.85),
         new LXFloat4(0xff9100,1.00)
      };

      this.summerGradient = new Gradient(summerGradient, Gradient.ColorMode.RGB);

      LXFloat4[] autumGradient = {
         new LXFloat4(0xe7790b,0.00),
         new LXFloat4(0xd1aa29,0.32),
         new LXFloat4(0xfac5a4,0.56),
         new LXFloat4(0xed7353,0.90),
         new LXFloat4(0xff0000,1.00)
      };

      this.autumGradient = new Gradient(autumGradient, Gradient.ColorMode.RGB);

      LXFloat4[] winterGradient = {
         new LXFloat4(0xa3eed6,0.00),
         new LXFloat4(0xdcbcd4,0.21),
         new LXFloat4(0xff96d0,0.39),
         new LXFloat4(0xcb81d6,0.65),
         new LXFloat4(0x4b51f5,1.00)
      };

      this.winterGradient = new Gradient(winterGradient, Gradient.ColorMode.RGB);
  }
  
  public LXModel barFront() {
    return children[1];
  }
  
  public LXModel barBack() {
    return children[0];
  }
  
  BarTop(String ip) {
    super(ip, new LXModel[] {
     new BarTopBack(),
     new BarTopFront()
    });
    initGradients();
  }
}
